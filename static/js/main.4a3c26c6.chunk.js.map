{"version":3,"sources":["types/Errors.ts","components/PostsList.tsx","utils/fetchClient.ts","types/FormsError.ts","utils/apiActions.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["Errors","PostsList","posts","onPost","selectedPost","onSelectedPost","className","map","post","isButtonOpen","id","title","onClick","type","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","FormErrors","client","apiActions","catch","e","Error","Loader","NewCommentForm","onComments","useState","name","setName","email","setEmail","comment","setComment","None","nameError","setNameError","emailError","setEmailError","commentError","setCommentError","isSubmitLoading","setIsSubmitLoading","validate","value","trim","length","htmlFor","placeholder","cn","onChange","target","preventDefault","isNameValid","isEmailValid","isCommentValid","Name","Email","Comment","postId","newComment","currentComments","finally","submit","PostDetails","isForm","setIsForm","isCommentsLoading","setIsCommentsLoading","commentsError","setIsCommentsError","postComments","setPostComments","useEffect","commentsFromServer","Comments","isAnyComments","isShow","noCommentsYet","comments","writeCommentButton","href","newComments","filter","c","UserSelector","users","selectedUser","isDropdownActive","setIsDropdownActive","role","tabIndex","onFocus","onBlur","onMouseDown","user","App","setUsers","setSelectedUser","userPosts","setUserPosts","isPostsLoading","setIsPostsLoading","isAnyPosts","setSelectedPost","usersError","setUsersError","postsError","setPostsError","noPostYet","postList","usersFromServer","Users","Posts","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a3c26c6.chunk.js","sourcesContent":["export enum Errors {\n  Users = 'Error loading users',\n  Posts = 'Error loading posts',\n  None = '',\n  Comments = 'Error loading comments',\n}\n","import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  onPost: (data: Post) => void;\n  selectedPost: Post | null;\n  onSelectedPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = (\n  {\n    posts,\n    onPost,\n    selectedPost,\n    onSelectedPost,\n  },\n) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const isButtonOpen = selectedPost !== post;\n\n            return (\n              <tr data-cy=\"Post\" key={post.id}>\n                <td data-cy=\"PostId\">{post.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  {isButtonOpen\n                    ? (\n                      <button\n                        onClick={() => onPost(post)}\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link is-light\"\n                      >\n                        Open\n                      </button>\n                    )\n                    : (\n                      <button\n                        onClick={() => onSelectedPost(null)}\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link\"\n                      >\n                        Close\n                      </button>\n                    )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\ntype MateApiData = Comment\n| Post\n| CommentData\n| User\n| Comment[]\n| Post[]\n| User[]\n| null;\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: MateApiData = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: MateApiData) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: MateApiData) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum FormErrors {\n  None = '',\n  Name = 'Name is required',\n  Email = 'Email is required',\n  Comment = 'Enter some text',\n}\n","import { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const apiActions = {\n  getAllUsers: () => {\n    return client.get<User[]>('/users')\n      .catch((e) => {\n        throw new Error(e);\n      });\n  },\n\n  getUserPosts: (id: number) => {\n    return client.get<Post[]>(`/posts?userId=${id}`);\n  },\n\n  getPostComments: (id: number) => {\n    return client.get<Comment[]>(`/comments?postId=${id}`);\n  },\n\n  addComment: (data: CommentData) => {\n    return client.post<Comment>('/comments', data);\n  },\n\n  deleteComment: (id: number) => {\n    return client.delete(`/comments/${id}`);\n  },\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable react/button-has-type */\nimport React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport { Comment } from '../types/Comment';\nimport { FormErrors } from '../types/FormsError';\nimport { apiActions } from '../utils/apiActions';\n\ntype Props = {\n  onComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  id: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onComments, id }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const [nameError, setNameError] = useState(FormErrors.None);\n  const [emailError, setEmailError] = useState(FormErrors.None);\n  const [commentError, setCommentError] = useState(FormErrors.None);\n\n  const [isSubmitLoading, setIsSubmitLoading] = useState(false);\n\n  const handleNameChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setName(e.target.value);\n    setNameError(FormErrors.None);\n  };\n\n  const handleEmailChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setEmail(e.target.value);\n    setEmailError(FormErrors.None);\n  };\n\n  const handleCommentChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setComment(e.target.value);\n    setCommentError(FormErrors.None);\n  };\n\n  const validate = (value: string) => {\n    const trimValue = value.trim();\n\n    return trimValue.length > 0;\n  };\n\n  const resetError = () => {\n    setCommentError(FormErrors.None);\n    setEmailError(FormErrors.None);\n    setNameError(FormErrors.None);\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n  };\n\n  const submit = () => {\n    const isNameValid = validate(name);\n    const isEmailValid = validate(email);\n    const isCommentValid = validate(comment);\n\n    if (!isNameValid) {\n      setNameError(FormErrors.Name);\n    }\n\n    if (!isEmailValid) {\n      setEmailError(FormErrors.Email);\n    }\n\n    if (!isCommentValid) {\n      setCommentError(FormErrors.Comment);\n    }\n\n    if (isNameValid && isEmailValid && isCommentValid) {\n      setIsSubmitLoading(true);\n      apiActions.addComment({\n        postId: id,\n        name,\n        email,\n        body: comment,\n      })\n        .then((newComment) => {\n          onComments((currentComments) => [...currentComments, newComment]);\n          setComment('');\n        })\n        .finally(() => setIsSubmitLoading(false));\n    }\n  };\n\n  const handleSubmit = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    e.preventDefault();\n\n    submit();\n  };\n\n  const handleReset = () => {\n    reset();\n    resetError();\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': nameError })}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {nameError}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': emailError })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {emailError}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', { 'is-danger': commentError })}\n            value={comment}\n            onChange={handleCommentChange}\n          />\n        </div>\n\n        {commentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {commentError}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            onClick={handleSubmit}\n            type=\"submit\"\n            className={cn('button is-link', { 'is-loading': isSubmitLoading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            onClick={handleReset}\n            type=\"reset\"\n            className=\"button is-link is-light\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Errors } from '../types/Errors';\nimport { Post } from '../types/Post';\nimport { apiActions } from '../utils/apiActions';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [isForm, setIsForm] = useState(false);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [commentsError, setIsCommentsError] = useState(Errors.None);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n\n  useEffect(() => {\n    setIsCommentsLoading(true);\n\n    apiActions.getPostComments(post.id)\n      .then(commentsFromServer => {\n        setPostComments(commentsFromServer);\n      })\n      .catch(() => setIsCommentsError(Errors.Comments))\n      .finally(() => setIsCommentsLoading(false));\n  }, [post]);\n\n  const isAnyComments = postComments.length > 0;\n\n  const isShow = {\n    commentsError: commentsError && !isCommentsLoading,\n    noCommentsYet: !isAnyComments && !commentsError && !isCommentsLoading,\n    comments: isAnyComments && !commentsError && !isCommentsLoading,\n    writeCommentButton: !isForm && !commentsError && !isCommentsLoading,\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && <Loader />}\n\n          {isShow.commentsError\n            && (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                {commentsError}\n              </div>\n            )}\n\n          {isShow.noCommentsYet\n            && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n          {isShow.comments\n            && (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n\n                {postComments.map(comment => {\n                  const handleCommentDeleteClick = () => {\n                    const newComments = [...postComments]\n                      .filter(c => c.id !== comment.id);\n\n                    setPostComments(newComments);\n\n                    apiActions.deleteComment(comment.id);\n                  };\n\n                  return (\n                    <article\n                      key={comment.id}\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                    >\n                      <div className=\"message-header\">\n                        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                          {comment.name}\n                        </a>\n                        <button\n                          onClick={handleCommentDeleteClick}\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  );\n                })}\n              </>\n            )}\n          {isShow.writeCommentButton && (\n            <button\n              onClick={() => setIsForm(true)}\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n        {isForm && <NewCommentForm onComments={setPostComments} id={post.id} />}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  onPost: (data: User) => void;\n  selectedUser: User | null;\n};\n\nexport const UserSelector: React.FC<Props> = (\n  { users, onPost, selectedUser },\n) => {\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': isDropdownActive })}\n      role=\"button\"\n      tabIndex={0}\n      onFocus={() => setIsDropdownActive(true)}\n      onBlur={() => setIsDropdownActive(false)}\n      onMouseDown={() => setIsDropdownActive(!isDropdownActive)}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n        >\n          {selectedUser\n            ? (<span>{selectedUser.name}</span>)\n            : (<span>Choose a user</span>)}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => {\n            const handleUserLinkClick = (\n              e: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n            ) => {\n              e.preventDefault();\n              onPost(user);\n              setIsDropdownActive(false);\n            };\n\n            return (\n              <a\n                key={user.id}\n                onClick={handleUserLinkClick}\n                href={`user-${user.id}`}\n                className={cn('dropdown-item',\n                  { 'is-active': user === selectedUser })}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { apiActions } from './utils/apiActions';\nimport { Errors } from './types/Errors';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n\n  const isAnyPosts = userPosts.length > 0;\n\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [usersError, setUsersError] = useState(Errors.None);\n  const [postsError, setPostsError] = useState(Errors.None);\n\n  const getPosts = (user: User) => {\n    setSelectedPost(null);\n    setPostsError(Errors.None);\n    setIsPostsLoading(true);\n    setSelectedUser(user);\n\n    apiActions.getUserPosts(user.id)\n      .then(setUserPosts)\n      .catch(() => setPostsError(Errors.Posts))\n      .finally(() => setIsPostsLoading(false));\n  };\n\n  const getPost = (post: Post) => {\n    setSelectedPost(post);\n  };\n\n  const isShow = {\n    noPostYet: !isAnyPosts && selectedUser && !isPostsLoading && !postsError,\n    postList: isAnyPosts && selectedUser && !isPostsLoading && !postsError,\n  };\n\n  useEffect(() => {\n    apiActions.getAllUsers()\n      .then(usersFromServer => {\n        setUsers(usersFromServer);\n      })\n      .catch(() => {\n        setUsersError(Errors.Users);\n      });\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onPost={getPosts}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isPostsLoading && <Loader />}\n\n                {usersError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"UsersLoadingError\"\n                  >\n                    {usersError}\n                  </div>\n                )}\n\n                {postsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {postsError}\n                  </div>\n                )}\n\n                {isShow.noPostYet\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                {isShow.postList\n                  && (\n                    <PostsList\n                      posts={userPosts}\n                      onPost={getPost}\n                      selectedPost={selectedPost}\n                      onSelectedPost={setSelectedPost}\n                    />\n                  )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost\n                && (\n                  <PostDetails\n                    post={selectedPost}\n                    key={selectedPost.id}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}